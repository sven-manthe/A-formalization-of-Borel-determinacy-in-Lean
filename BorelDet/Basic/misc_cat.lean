import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Category.Preorder
import BorelDet.Basic.general

open Classical CategoryTheory

universe u u1 v1
variable {Œ± C D : Type*} [Category C] [Category D]

@[congr] lemma inv_congr {X Y : C} (f g : X ‚ü∂ Y) [IsIso f] (h : f = g) :
  inv f = inv g (I := by subst h; infer_instance) := by simp [h]

attribute [instance] HasForget.hasCoeToSort
attribute [instance] HasForget.instFunLike
instance [HasForget C] (X Y : C) :
  CoeFun (X ‚ü∂ Y) fun _ => X ‚Üí Y where coe f := f --TODO use elsewhere
@[simp] lemma hom_inv_id_apply [HasForget C] {c d : C} --currently only for TopCat?
  (f : c ‚âÖ d) (x : d) : f.hom (f.inv x) = x := by
  rw [‚Üê CategoryTheory.comp_apply]; simp
@[simp] lemma inv_hom_id_apply [HasForget C] {c d : C}
  (f : c ‚âÖ d) (x : c) : f.inv (f.hom x) = x := by
  rw [‚Üê CategoryTheory.comp_apply]; simp
@[simp] lemma cancel_inv_left [HasForget C] {c d : C}
  (f : c ‚ü∂ d) [IsIso f] (x : c) : inv f (f x) = x := by
  rw [‚Üê CategoryTheory.comp_apply]; simp
@[simp] lemma cancel_inv_right [HasForget C] {c d : C}
  (f : c ‚ü∂ d) [IsIso f] (x : d) : f (inv f x) = x := by
  rw [‚Üê CategoryTheory.comp_apply]; simp
lemma naturality_apply [HasForget D] {F G : C ‚•§ D} (Œ±: F ‚ü∂ G)
  {c d : C} (f : c ‚ü∂ d) (x : F.obj c) :
  Œ±.app d (F.map f x) = G.map f (Œ±.app c x) := by
  rw [‚Üê CategoryTheory.comp_apply, ‚Üê CategoryTheory.comp_apply, Œ±.naturality]
@[simp] lemma cancel_inv_left_types {c d : Type u}
  (f : c ‚ü∂ d) [IsIso f] (x : c) : inv f (f x) = x := by
  apply cancel_inv_left (C := Type u)
@[simp] lemma cancel_inv_right_types {c d : Type u}
  (f : c ‚ü∂ d) [IsIso f] (x : d) : f (inv f x) = x := by
  apply cancel_inv_right (C := Type u)
lemma naturality_apply_types {F G : C ‚•§ Type u} (Œ±: F ‚ü∂ G)
  {c d : C} (f : c ‚ü∂ d) (x : F.obj c) :
  Œ±.app d (F.map f x) = G.map f (Œ±.app c x) := by
  apply naturality_apply (D := Type u)

@[simp] lemma cat_preimage_id {c : Type u} (x : Set c) :
  (ùüô c)‚Åª¬π' x = x := Set.preimage_id
@[simp] lemma cat_preimage_comp {c d e : Type u} (f : c ‚ü∂ d) (g : d ‚Üí e) (x : Set e) :
  (f ‚â´ g)‚Åª¬π' x = f‚Åª¬π' (g‚Åª¬π' x) := Set.preimage_comp

@[simp] lemma cancel_inv_left'' {c d : Type u}
  (f : c ‚ü∂ d) [IsIso f]: inv f ‚àò f = id := by ext x; simp
@[simp] lemma cancel_inv_right'' {c d : Type u}
  (f : c ‚ü∂ d) [IsIso f]: f ‚àò inv f = id := by ext x; simp
lemma iso_cancel_comp {a b c : Type u} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : a ‚ü∂ c) (x : b)
  [IsIso f] [IsIso h] (hc : f ‚â´ g = h) : inv h (g x) = inv f x := by
  have := IsIso.of_isIso_fac_left hc
  subst hc; simp

instance : Mono (X := Œ±) Option.some := (mono_iff_injective some).mpr (Option.some_injective Œ±)
instance {J} [Category J] {F} :
    Nonempty (Limits.IsColimit (Limits.Types.colimitCocone (J := J) F)) :=
  ‚ü®Limits.Types.colimitCoconeIsColimit F‚ü©

def coproductColimitCocone {J : Type u1} (F : Discrete J ‚•§ Type _) :
    Limits.ColimitCocone F where
  cocone :=
    { pt := Œ£j, F.obj j
      Œπ := Discrete.natTrans (fun j x => ‚ü®j, x‚ü©)}
  isColimit :=
    { desc := fun s x => s.Œπ.app x.1 x.2
      uniq := fun s m w => funext fun ‚ü®j, x‚ü© ‚Ü¶ congr_fun (w j) x }
lemma isCoprod_type_iff {J : Type u1} {F : Discrete J ‚•§ Type (max u1 v1)} (t : Limits.Cocone F) :
    Nonempty (Limits.IsColimit t)
    ‚Üî (‚àÄ i, Mono (t.Œπ.app i)) ‚àß Set.univ.PairwiseDisjoint (fun i ‚Ü¶ Set.range (t.Œπ.app i))
    ‚àß ‚àÄ y, ‚àÉ i x, t.Œπ.app i x = y := by
  constructor
  ¬∑ intro ‚ü®h‚ü©; constructor
    ¬∑ intro i
      let s : Limits.Cocone F := {
        pt := Option (F.obj i)
        Œπ := Discrete.natTrans (fun j ‚Ü¶
          if h : i = j then by subst h; exact Option.some else fun _ ‚Ü¶ Option.none)
      }
      suffices Mono (t.Œπ.app i ‚â´ h.desc s) by apply mono_of_mono (t.Œπ.app i) (h.desc s)
      simp [s]; infer_instance
    ¬∑ constructor
      ¬∑ apply (pairwiseDisjoint_iff _).mpr; intros i x j y he
        let s : Limits.Cocone F := {
          pt := Option (F.obj i ‚äï F.obj j)
          Œπ := Discrete.natTrans (fun k ‚Ü¶
            if h : i = k then by subst h; exact Option.some ‚àò Sum.inl else
            if h : j = k then by subst h; exact Option.some ‚àò Sum.inr else fun _ ‚Ü¶ Option.none)
        }
        replace he : (t.Œπ.app i ‚â´ h.desc s) x = (t.Œπ.app j ‚â´ h.desc s) y := congr_arg (h.desc s) he
        rw [h.fac, h.fac] at he; by_contra h; simp [s, h] at he
      exact Limits.Types.jointly_surjective F h
  ¬∑ rintro ‚ü®h1, h2, h3‚ü©
    let s := coproductColimitCocone F
    have := Nonempty.intro s.2
    suffices s.1 ‚âÖ t by exact (Limits.IsColimit.equivIsoColimit this.symm).nonempty
    apply Limits.Cocones.ext; swap
    let f : s.1.pt ‚ü∂ t.pt := fun ‚ü®i, x‚ü© ‚Ü¶ t.Œπ.app i x
    have : IsIso f := by
      rw [isIso_iff_bijective]; constructor
      ¬∑ intro ‚ü®i, x‚ü© ‚ü®j, y‚ü© h; have he := ((pairwiseDisjoint_iff _).mp h2) h
        subst he; suffices x = y by simp [this]
        exact (mono_iff_injective _).mp (h1 i) h
      ¬∑ intro y; obtain ‚ü®i, x, h‚ü© := h3 y; use ‚ü®i, x‚ü©
    exact asIso f; aesop_cat
lemma colim_isIso --exists?
  {F G : C ‚•§ D} {s : Limits.Cocone F} {t : Limits.Cocone G}
  (hs : Limits.IsColimit s) (ht : Limits.IsColimit t) (f : F ‚âÖ G) : IsIso (hs.map t f.hom) := by
  use ht.map s (f.inv); constructor <;>
    (apply Limits.IsColimit.hom_ext (by assumption); simp)
lemma coprod_type_isIso_iff {J : Type u1} {F G : Discrete J ‚•§ Type (max u1 v1)}
  {s : Limits.Cocone F} {t : Limits.Cocone G} (hs : Limits.IsColimit s) (ht : Limits.IsColimit t)
  (f : ‚àÄ j, F.obj ‚ü®j‚ü© ‚ü∂ G.obj ‚ü®j‚ü©) :
  IsIso (hs.map t (Discrete.natTrans (fun ‚ü®j‚ü© ‚Ü¶ f j))) ‚Üî ‚àÄ j, IsIso (f j) := by
  let df := Discrete.natTrans (fun ‚ü®j‚ü© ‚Ü¶ f j)
  let ‚ü®_, _, h3‚ü© := (isCoprod_type_iff s).mp (Nonempty.intro hs)
  let ‚ü®_, h2, _‚ü© := (isCoprod_type_iff t).mp (Nonempty.intro ht)
  constructor <;> intro hi; swap
  ¬∑ have : ‚àÄ j, IsIso (df.app j) := fun ‚ü®j‚ü© ‚Ü¶ hi j
    have := NatIso.isIso_of_isIso_app df
    exact colim_isIso hs ht (asIso df)
  ¬∑ intro j; apply (isIso_iff_bijective (f j)).mpr; constructor
    ¬∑ suffices Mono (f j) by exact injective_of_mono (f j)
      have h : Mono (s.Œπ.app ‚ü®j‚ü© ‚â´ hs.map t df) := by apply mono_comp
      simp [df] at h; exact mono_of_mono _ (t.Œπ.app ‚ü®j‚ü©)
    ¬∑ intro y; obtain ‚ü®i, x, h‚ü© := h3 (inv (hs.map t df) (t.Œπ.app ‚ü®j‚ü© y))
      have h' : (s.Œπ.app i ‚â´ hs.map t df) x = (inv (hs.map t df) ‚â´ hs.map t df) (t.Œπ.app ‚ü®j‚ü© y) :=
        congr_arg (hs.map t df) h
      simp [- types_comp_apply] at h'
      have heq : i = ‚ü®j‚ü© := (pairwiseDisjoint_iff _).mp h2 h'
      subst heq; exact ‚ü®x, injective_of_mono (t.Œπ.app ‚ü®j‚ü©) h'‚ü©
